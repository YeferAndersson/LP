---
// src/components/RomanticAudio.astro
// Componente para manejar m√∫sica rom√°ntica de fondo
---

<div id="audio-container" class="hidden">
  <!-- Audio elements will be created dynamically -->
</div>

<script>
  class RomanticAudio {
    constructor() {
      this.isPlaying = false;
      this.currentTrack = null;
      this.volume = 0.3;
      this.audioContext = null;
      this.playlist = [
        // Placeholder URLs - reemplaza con tu m√∫sica
        {
          name: "Nuestra Canci√≥n",
          url: "/audio/romantic-song-1.mp3",
          description: "La canci√≥n que nos recuerda el primer baile"
        },
        {
          name: "Melod√≠a del Coraz√≥n", 
          url: "/audio/romantic-song-2.mp3",
          description: "M√∫sica suave para momentos especiales"
        },
        {
          name: "Suspiros de Amor",
          url: "/audio/romantic-song-3.mp3", 
          description: "Instrumentos que hablan de amor"
        }
      ];
      this.currentIndex = 0;
      this.init();
    }

    async init() {
      try {
        // Crear contexto de audio para efectos
        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        // Crear elemento de audio principal
        this.audio = new Audio();
        this.audio.volume = this.volume;
        this.audio.loop = true;
        
        // Event listeners
        this.audio.addEventListener('loadstart', () => {
          console.log('‚ô™ Cargando m√∫sica rom√°ntica...');
        });
        
        this.audio.addEventListener('canplay', () => {
          console.log('‚ô™ M√∫sica lista para reproducir');
        });
        
        this.audio.addEventListener('error', (e) => {
          console.log('‚ô™ Error al cargar m√∫sica:', e);
          this.handleAudioError();
        });

        // Preparar primera canci√≥n
        this.loadTrack(0);
        
      } catch (error) {
        console.log('‚ô™ Audio no disponible:', error);
        this.handleAudioError();
      }
    }

    loadTrack(index) {
      if (index >= 0 && index < this.playlist.length) {
        this.currentIndex = index;
        this.currentTrack = this.playlist[index];
        this.audio.src = this.currentTrack.url;
        this.showNowPlaying();
      }
    }

    async play() {
      try {
        // Resume audio context if suspended
        if (this.audioContext.state === 'suspended') {
          await this.audioContext.resume();
        }
        
        await this.audio.play();
        this.isPlaying = true;
        this.updateUI();
        this.createVisualEffect();
        
        console.log(`‚ô™ Reproduciendo: ${this.currentTrack.name}`);
        
      } catch (error) {
        console.log('‚ô™ Error al reproducir:', error);
        this.handlePlayError();
      }
    }

    pause() {
      this.audio.pause();
      this.isPlaying = false;
      this.updateUI();
      console.log('‚ô™ M√∫sica pausada');
    }

    toggle() {
      if (this.isPlaying) {
        this.pause();
      } else {
        this.play();
      }
    }

    nextTrack() {
      const nextIndex = (this.currentIndex + 1) % this.playlist.length;
      this.loadTrack(nextIndex);
      if (this.isPlaying) {
        this.play();
      }
    }

    previousTrack() {
      const prevIndex = this.currentIndex === 0 
        ? this.playlist.length - 1 
        : this.currentIndex - 1;
      this.loadTrack(prevIndex);
      if (this.isPlaying) {
        this.play();
      }
    }

    setVolume(volume) {
      this.volume = Math.max(0, Math.min(1, volume));
      this.audio.volume = this.volume;
    }

    updateUI() {
      const musicButton = document.getElementById('music-toggle');
      if (musicButton) {
        musicButton.innerHTML = this.isPlaying 
          ? `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
             </svg>`
          : `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"></path>
             </svg>`;
        
        // Actualizar tooltip
        musicButton.title = this.isPlaying 
          ? `Pausar: ${this.currentTrack?.name || 'M√∫sica'}`
          : `Reproducir: ${this.currentTrack?.name || 'M√∫sica'}`;
      }
    }

    showNowPlaying() {
      if (!this.currentTrack) return;
      
      // Crear notificaci√≥n de canci√≥n actual
      const notification = document.createElement('div');
      notification.className = 'fixed top-20 right-6 bg-black/80 backdrop-blur-sm border border-rose-300/30 rounded-xl p-4 text-white z-50 max-w-xs';
      notification.innerHTML = `
        <div class="flex items-center space-x-3">
          <div class="w-10 h-10 bg-gradient-to-br from-rose-500 to-pink-500 rounded-full flex items-center justify-center">
            üéµ
          </div>
          <div class="flex-1">
            <div class="font-cursive text-rose-200 text-sm font-medium">${this.currentTrack.name}</div>
            <div class="text-rose-300/70 text-xs">${this.currentTrack.description}</div>
          </div>
        </div>
      `;
      
      document.body.appendChild(notification);
      
      // Animar entrada
      notification.animate([
        { transform: 'translateX(100%)', opacity: 0 },
        { transform: 'translateX(0)', opacity: 1 }
      ], {
        duration: 300,
        easing: 'ease-out'
      });
      
      // Auto-remover despu√©s de 3 segundos
      setTimeout(() => {
        notification.animate([
          { transform: 'translateX(0)', opacity: 1 },
          { transform: 'translateX(100%)', opacity: 0 }
        ], {
          duration: 300,
          easing: 'ease-in'
        }).onfinish = () => notification.remove();
      }, 3000);
    }

    createVisualEffect() {
      if (!this.isPlaying) return;
      
      // Crear efecto visual de ondas sonoras
      const musicButton = document.getElementById('music-toggle');
      if (musicButton) {
        const waves = document.createElement('div');
        waves.className = 'absolute inset-0 rounded-full animate-ping bg-rose-400/30';
        musicButton.style.position = 'relative';
        musicButton.appendChild(waves);
        
        setTimeout(() => {
          if (waves.parentNode) {
            waves.remove();
          }
        }, 1000);
      }
    }

    handleAudioError() {
      // Fallback sin audio
      console.log('‚ô™ Modo silencioso activado');
      this.isPlaying = false;
      this.updateUI();
    }

    handlePlayError() {
      // Intentar con siguiente canci√≥n
      console.log('‚ô™ Intentando siguiente canci√≥n...');
      this.nextTrack();
    }

    // Efectos de sonido para interacciones
    playClickSound() {
      this.playTone(800, 100, 0.1);
    }

    playHoverSound() {
      this.playTone(600, 50, 0.05);
    }

    playHeartSound() {
      this.playTone(880, 200, 0.1);
      setTimeout(() => this.playTone(660, 200, 0.1), 100);
    }

    playTone(frequency, duration, volume) {
      if (!this.audioContext) return;
      
      try {
        const oscillator = this.audioContext.createOscillator();
        const gainNode = this.audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(this.audioContext.destination);
        
        oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);
        oscillator.type = 'sine';
        
        gainNode.gain.setValueAtTime(volume, this.audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + duration / 1000);
        
        oscillator.start(this.audioContext.currentTime);
        oscillator.stop(this.audioContext.currentTime + duration / 1000);
        
      } catch (error) {
        console.log('‚ô™ Error al reproducir tono:', error);
      }
    }
  }

  // Inicializar audio cuando DOM est√© listo
  document.addEventListener('DOMContentLoaded', () => {
    const romanticAudio = new RomanticAudio();
    
    // Conectar con el bot√≥n de m√∫sica
    const musicButton = document.getElementById('music-toggle');
    if (musicButton) {
      musicButton.addEventListener('click', () => {
        romanticAudio.toggle();
      });
    }
    
    // Conectar efectos de sonido con interacciones
    document.addEventListener('click', (e) => {
      if (e.target.closest('.romantic-button, .memory-card, .timeline-icon')) {
        romanticAudio.playClickSound();
      }
    });
    
    document.addEventListener('mouseenter', (e) => {
      if (e.target.closest('.glass-romantic, .love-note')) {
        romanticAudio.playHoverSound();
      }
    }, true);
    
    // Sonido especial para corazones
    document.addEventListener('click', (e) => {
      if (e.target.closest('#hero-heart, .romantic-heart')) {
        romanticAudio.playHeartSound();
      }
    });
    
    // Exponer globalmente para uso desde otros scripts
    window.romanticAudio = romanticAudio;
  });
</script>

<style>
  @keyframes equalizer-bounce {
    0% { height: 10px; }
    100% { height: 25px; }
  }
  
  #audio-equalizer .bar:nth-child(1) { animation-delay: 0s; }
  #audio-equalizer .bar:nth-child(2) { animation-delay: 0.1s; }
  #audio-equalizer .bar:nth-child(3) { animation-delay: 0.2s; }
  #audio-equalizer .bar:nth-child(4) { animation-delay: 0.3s; }
  #audio-equalizer .bar:nth-child(5) { animation-delay: 0.4s; }
</style>